version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: userdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5




  config-server:
    build: ./config-server
    container_name: config-server
    restart: always
    ports:
      - "8888:8888"
    volumes:
      - ./config-repo:/app/config-repo
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10


  user-service:
    build: ./user-service
    container_name: user-service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  bad-words-service:
    build: ./bad-words-service
    container_name: bad-words-service
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      discovery-server:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    environment:
      - SPRING_APPLICATION_NAME=bad-words-service
      - SPRING_PROFILES_ACTIVE=default


  post-service:
    build: ./post-service
    container_name: post-service
    restart: always
    ports:
      - "8086:8086"
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    environment:
      - SPRING_APPLICATION_NAME=post-service


  analytic-service:
    build: ./analytic-service
    container_name: analytic-service
    ports:
      - "8089:8089"
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8089/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - SPRING_APPLICATION_NAME=analytic-service
      - SPRING_PROFILES_ACTIVE=default


  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      bad-words-service:
        condition: service_healthy
      discovery-server:
          condition: service_started
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5




volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
